/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum? ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * API version: 3.16.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tatum

type XlmTx struct {
	// A unique identifier for this transaction.
	Id string `json:"id,omitempty"`
	// A cursor value for use in pagination.
	PagingToken string `json:"paging_token,omitempty"`
	// Indicates if this transaction was successful or not.
	Successful bool `json:"successful,omitempty"`
	// A hex-encoded SHA-256 hash of this transaction’s XDR-encoded form.
	Hash string `json:"hash,omitempty"`
	// The sequence number of the ledger that this transaction was included in.
	Ledger float64 `json:"ledger,omitempty"`
	// The date this transaction was created.
	CreatedAt string `json:"created_at,omitempty"`
	// The account that originates the transaction.
	SourceAccount string `json:"source_account,omitempty"`
	// The source account’s sequence number that this transaction consumed.
	SourceAccountSequence string `json:"source_account_sequence,omitempty"`
	// The fee (in stroops) paid by the source account to apply this transaction to the ledger.
	FeePaid float64 `json:"fee_paid,omitempty"`
	FeeCharged float64 `json:"fee_charged,omitempty"`
	// The maximum fee (in stroops) that the source account was willing to pay.
	MaxFee float64 `json:"max_fee,omitempty"`
	// The number of operations contained within this transaction.
	OperationCount float64 `json:"operation_count,omitempty"`
	// A base64 encoded string of the raw TransactionEnvelope XDR struct for this transaction.
	EnvelopeXdr string `json:"envelope_xdr,omitempty"`
	// A base64 encoded string of the raw TransactionResult XDR struct for this transaction.
	ResultXdr string `json:"result_xdr,omitempty"`
	// A base64 encoded string of the raw TransactionMeta XDR struct for this transaction
	ResultMetaXdr string `json:"result_meta_xdr,omitempty"`
	// A base64 encoded string of the raw LedgerEntryChanges XDR struct produced by taking fees for this transaction.
	FeeMetaXdr string `json:"fee_meta_xdr,omitempty"`
	// The optional memo attached to a transaction. Usually used as an account distiguisher.
	Memo string `json:"memo,omitempty"`
	// The type of memo.
	MemoType string `json:"memo_type,omitempty"`
	// An array of signatures used to sign this transaction.
	Signatures []string `json:"signatures,omitempty"`
}
