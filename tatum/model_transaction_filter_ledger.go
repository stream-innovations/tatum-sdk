/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum? ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * API version: 3.16.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tatum

type TransactionFilterLedger struct {
	// Source account - source of transaction(s).
	Account string `json:"account,omitempty"`
	// Counter account - transaction(s) destination account.
	CounterAccount string `json:"counterAccount,omitempty"`
	// Currency of the transactions.
	Currency string `json:"currency,omitempty"`
	// Starting date to search for transactions from in UTC millis. If not present, search all history.
	From int64 `json:"from,omitempty"`
	// Amount of the transaction. AND is used between filter options.
	Amount []TransactionFilterAmount `json:"amount,omitempty"`
	// List of currencies of the transactions.
	Currencies []string `json:"currencies,omitempty"`
	// Type of payment
	TransactionType string `json:"transactionType,omitempty"`
	// Types of payment
	TransactionTypes []string `json:"transactionTypes,omitempty"`
	// Type of operation.
	OpType string `json:"opType,omitempty"`
	// For bookkeeping to distinct transaction purpose.
	TransactionCode string `json:"transactionCode,omitempty"`
	// Payment ID defined in payment order by sender.
	PaymentId string `json:"paymentId,omitempty"`
	// Recipient note defined in payment order by sender.
	RecipientNote string `json:"recipientNote,omitempty"`
	// Sender note defined in payment order by sender.
	SenderNote string `json:"senderNote,omitempty"`
	// Date until to search for transactions in UTC millis. If not present, search up till now.
	To int64 `json:"to,omitempty"`
}
