/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum? ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * API version: 3.16.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tatum

type BuyAssetOnMarketplaceTron struct {
	// Blockchain to work with.
	Chain string `json:"chain"`
	// Address of the marketplace smart contract.
	ContractAddress string `json:"contractAddress"`
	// Optional address of the TRC20 token, which will be used as a selling currency of the NFT.
	Erc20Address string `json:"erc20Address,omitempty"`
	// In case of the ERC20 listing, it's possible to buy on behalf of someone else. This value is the address of the buyer, which should approve spending of the ERC20 tokens for the Marketplace contract. This could be used for a buying from the custodial wallet address.
	Buyer string `json:"buyer,omitempty"`
	// ID of the listing. It's up to the developer to generate unique ID
	ListingId string `json:"listingId"`
	// Amount of the assets to be sent. For ERC-721 tokens, enter 1.
	Amount string `json:"amount,omitempty"`
	// Private key of sender address. Private key, or signature Id must be present.
	FromPrivateKey string `json:"fromPrivateKey"`
	// Fee in TRX to be paid.
	FeeLimit float64 `json:"feeLimit"`
}
