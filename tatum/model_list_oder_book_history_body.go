/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum? ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * API version: 3.16.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tatum

type ListOderBookHistoryBody struct {
	// Account ID. If present, only closed trades for given account will be present.
	Id string `json:"id,omitempty"`
	// Customer ID. If present, only closed trades for given customer will be present.
	CustomerId string `json:"customerId,omitempty"`
	// Max number of items per page is 50.
	PageSize float64 `json:"pageSize"`
	// Offset to obtain next page of the data.
	Offset float64 `json:"offset,omitempty"`
	// Trade pair. If present, list historical trades for that pair.
	Pair string `json:"pair,omitempty"`
	// Get the total trade pair count based on the filter. Either count or pageSize is accepted.
	Count bool `json:"count,omitempty"`
	// Trade types.
	Types []string `json:"types,omitempty"`
	// Amount of the trade. AND is used between filter options.
	Amount []TransactionFilterAmount `json:"amount,omitempty"`
	// Fill of the trade. AND is used between filter options.
	Fill []TransactionFilterAmount `json:"fill,omitempty"`
	// Price of the trade. AND is used between filter options.
	Price []TransactionFilterAmount `json:"price,omitempty"`
	// Created date of the trade. AND is used between filter options.
	Created []TransactionFilterAmount `json:"created,omitempty"`
	Sort *[]string `json:"sort,omitempty"`
}
