/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum? ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * API version: 3.16.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tatum

type XrpTx struct {
	// The SHA-512 hash of the transaction
	Hash string `json:"hash,omitempty"`
	// The ledger index of the ledger that includes this transaction.
	LedgerIndex float64 `json:"ledger_index,omitempty"`
	// The unique address of the account that initiated the transaction.
	Account string `json:"Account,omitempty"`
	// Amount of transaction, in drops. 1 drop = 0.000001 XRP.
	Amount string `json:"Amount,omitempty"`
	// Recipient account address.
	Destination string `json:"Destination,omitempty"`
	// Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network. Some transaction types have different minimum requirements.
	Fee string `json:"Fee,omitempty"`
	// Type of the transaction. XRp supports more than 18 transaction types. For the payment, Payment type is used.
	TransactionType string `json:"TransactionType,omitempty"`
	// Set of bit-flags for this transaction.
	Flags float64 `json:"Flags,omitempty"`
	// Last ledger, in which this transaction could have occured.
	LastLedgerSequence float64 `json:"LastLedgerSequence,omitempty"`
	// The sequence number of the account sending the transaction. A transaction is only valid if the Sequence number is exactly 1 greater than the previous transaction from the same account.
	Sequence float64 `json:"Sequence,omitempty"`
	// Timestamp of the transaction, in Ripple epoch (946684800 seconds after Unix Epoch)
	Date float64 `json:"date,omitempty"`
	// Ledger, in which transaction took place.
	InLedger float64 `json:"inLedger,omitempty"`
	SigningPubKey string `json:"SigningPubKey,omitempty"`
	TxnSignature string `json:"TxnSignature,omitempty"`
	Meta *XrpTxMeta `json:"meta,omitempty"`
	// Whether or not the transaction is included in a validated ledger. Any transaction not yet in a validated ledger is subject to change.
	Validated bool `json:"validated,omitempty"`
}
