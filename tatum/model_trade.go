/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum? ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * API version: 3.16.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tatum

type Trade struct {
	// ID of the trade
	Id string `json:"id,omitempty"`
	// Type of the trade, BUY or SELL
	Type_ string `json:"type,omitempty"`
	// Price to buy / sell
	Price string `json:"price,omitempty"`
	// Amount of the trade to be bought / sold
	Amount string `json:"amount,omitempty"`
	// Trading pair
	Pair string `json:"pair,omitempty"`
	// If closed trade was Maker or Taker trade
	IsMaker bool `json:"isMaker,omitempty"`
	// How much of the trade was already filled.
	Fill string `json:"fill,omitempty"`
	// ID of the account where fee will be paid, if any. If trade is a BUY or FUTURE_BUY type, feeAccountId must have same currency as a currency of currency2AccountId, and vice versa if trade is a SELL or FUTURE_SELL type, feeAccountId must have same currency as a currency of currency1AccountId.
	FeeAccountId string `json:"feeAccountId,omitempty"`
	// Percentage of the trade amount to be paid as a fee.
	Fee float64 `json:"fee,omitempty"`
	// ID of the account of the currenc 1 trade currency
	Currency1AccountId string `json:"currency1AccountId,omitempty"`
	// ID of the account of the currenc 2 trade currency
	Currency2AccountId string `json:"currency2AccountId,omitempty"`
	// Creation date, UTC millis
	Created float64 `json:"created,omitempty"`
	Attr *TradeAttr `json:"attr,omitempty"`
}
