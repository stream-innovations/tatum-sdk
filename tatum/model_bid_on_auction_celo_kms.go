/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum? ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * API version: 3.16.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tatum

type BidOnAuctionCeloKms struct {
	// Blockchain to work with.
	Chain string `json:"chain"`
	// Currency to pay for transaction gas
	FeeCurrency string `json:"feeCurrency"`
	// Address of the marketplace smart contract.
	ContractAddress string `json:"contractAddress"`
	// Optional address of the ERC20 token, which will be used as a selling currency of the NFT.
	Erc20Address string `json:"erc20Address,omitempty"`
	// In case of the ERC20 auction, it's possible to bid on behalf of someone else. This value is the address of the bidder, which should approve spending of the ERC20 tokens for the Auction contract. This could be used for a bidding from the custodial wallet address.
	Bidder string `json:"bidder,omitempty"`
	// ID of the auction.
	Id string `json:"id"`
	// Amount of the assets to be bid. This must include auction fee.
	BidValue string `json:"bidValue,omitempty"`
	// Identifier of the private key associated in signing application. Private key, or signature Id must be present.
	SignatureId string `json:"signatureId"`
	// If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
	Index float64 `json:"index,omitempty"`
	// Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.
	Nonce float64 `json:"nonce,omitempty"`
	Fee *DeployErc20Fee `json:"fee,omitempty"`
}
