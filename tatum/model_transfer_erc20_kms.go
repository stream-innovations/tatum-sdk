/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum? ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * API version: 3.16.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tatum

type TransferErc20Kms struct {
	// Sender account ID
	SenderAccountId string `json:"senderAccountId"`
	// Blockchain address to send ERC20 token to
	Address string `json:"address"`
	// Amount to be sent.
	Amount string `json:"amount"`
	// Compliance check, if withdrawal is not compliant, it will not be processed.
	Compliant bool `json:"compliant,omitempty"`
	// ERC20 symbol. Required only for calls.
	Currency string `json:"currency,omitempty"`
	// Gas limit for transaction in gas price. If not set, automatic calculation will be used.
	GasLimit string `json:"gasLimit,omitempty"`
	// Gas price in Gwei. If not set, automatic calculation will be used.
	GasPrice string `json:"gasPrice,omitempty"`
	// Identifier of the mnemonic / private key associated in signing application. When hash identifies mnemonic, index must be present to represent specific account to pay from. Private key, mnemonic or signature Id must be present. 
	SignatureId string `json:"signatureId"`
	// Derivation index of sender address.
	Index int32 `json:"index,omitempty"`
	// Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.
	Nonce float64 `json:"nonce,omitempty"`
	// Identifier of the payment, shown for created Transaction within Tatum sender account.
	PaymentId string `json:"paymentId,omitempty"`
	// Note visible to owner of withdrawing account
	SenderNote string `json:"senderNote,omitempty"`
}
